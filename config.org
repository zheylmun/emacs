#+TITLE:	Zach Heylmun Emacs Config
#+AUTHOR:	Zach Heylmun
#+EMAIL:	zach@voidstarsolutions.com

* Emacs Config
  
[[https://emacs.org][Emacs]] is a neat text editor

* Auto-Package-Update

Automagically update packages weekly if updates are available.

#+begin_src emacs-lisp

  ;; Automatically pull updates weekly and hide results
  (use-package auto-package-update
	:straight t
	:custom
	(auto-package-update-interval 7)
	(auto-package-update-hide-results t)
	:config
	(auto-package-update-maybe))

#+end_src

* Garbage Collection

[[https://github.com/emacsmirror/gcmh][Gcmh]] uses some clever trickery to perform garbage collections in when idle, minimizing the impact.  It's enabled last thing in [[file:init.el][init.el]], allowing initialization without gc, but enabling it before user input.

#+begin_src emacs-lisp

  (use-package gcmh
	:straight t)

#+end_src

* UI Configuration

The following section configures the basics of the stock Emacs UI. Inint.el also disables several UI elements as well as the startup message.  Here we configure default buffer rendering and UI behavior.

** Basic UI elements

#+begin_src emacs-lisp

  ;; Start text 16 pixels from the left edge of the buffer
  (set-fringe-mode 16)

  ;; Show column numbers in the modeline
  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
				  prog-mode-hook
				  conf-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; 8 character tabs are too damn large
  (setq-default tab-width 4)

  ;; Default behavior is case sensitive for sorting.
  ;; Just sort alphabetically
  (setq sort-fold-case t)

#+end_src

** File backup behavior

Default file backup behavior is awful.  Make it less awful:

#+begin_src emacs-lisp

  (setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering
	:straight t)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
		`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Evil first, Evil Always

Load evil super early so my key bindings don't change when I goof my config

** EVIL

[[eww:https://github.com/emacs-evil/evil][Evil]] mode brings Vim keybindings to Emacs.
   
#+begin_src emacs-lisp

  (defun void/evil-hook ()
	(dolist (mode '(custom-mode
					eshell-mode
					git-rebase-mode
					erc-mode
					circe-server-mode
					circe-chat-mode
					circe-query-mode
					sauron-mode
					term-mode))
	  (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
	:straight t
	:init
	(setq evil-want-integration t)
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)
	(setq evil-want-C-i-jump nil)
	:hook (evil-mode . void/evil-hook)
	:config
	(evil-mode 1)
	(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
	;; Use visual line motions everywhere
	(evil-global-set-key 'motion "j" 'evil-next-visual-line)
	(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
	(evil-set-initial-state 'messages-buffer-mode 'normal)
	(evil-set-initial-state 'dashboard-mode 'normal))

#+end_src

** Evil Collection

[[https://github.com/emacs-evil/evil-collection][Evil Collection]] Provides a sensible set of file types and automatically configures Evil mode for them

#+begin_src emacs-lisp

  (use-package evil-collection
	:straight t
	:init
	(evil-collection-init))

#+end_src

* Fonts

[[https://github.com/tonsky/FiraCode][Fira Code]] is a beautiful, open source font for programming. It has very pretty ligatures for common programming symbol combinations.

#+begin_src emacs-lisp

  ;; Used as default font for most things
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 120)

  (use-package fira-code-mode
	:straight t
	:hook prog-mode)     ; mode to enable fira-code-mode in

  ;;Fira Code Mode requires that the fonts be installed to the system before use.
  ;; Check for them and install if unavailable
  (if(not(find-font(font-spec :name "Fira Code Symbol")))
	  (fira-code-mode-install-fonts))

  (use-package all-the-icons
	:straight t)

  ;; All the icons requires that the fonts be installed to the system before use.
  ;; Check for them and install if unavailable, silencing the confirmation
  (if(not(find-font(font-spec :name "all-the-icons")))
	  (all-the-icons-install-fonts 0))

#+end_src
   
* UI Packages

Set of packages to improve the look and functionality of the UI
** Beacon

[[https://github.com/Malabarba/beacon][Beacon]] makes it easy to find your cursor when the screen moves

#+begin_src emacs-lisp
  (use-package beacon
  :straight t
  :config
  (beacon-mode 1))
#+end_src

** Doom Modeline
    
The Doom modeline provides a concise view of current mode functionality

#+begin_src emacs-lisp

  (use-package doom-modeline
	:straight t
	:init (doom-modeline-mode 1)
	:custom ((doom-modeline-height 16)))

#+end_src

** Doom Themes
    
#+begin_src emacs-lisp

  (use-package doom-themes
	:straight t
	:config
	(doom-themes-visual-bell-config)
	(doom-themes-treemacs-config)
	:init
	(load-theme 'doom-gruvbox t))

#+end_src

** Multiple Cursors

Add friendly mulit-editing

#+begin_src emacs-lisp

  (use-package multiple-cursors
	:straight t
	:config
	(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines))

#+end_src

** Rainbow Delimiters

[[eww:https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]] makes it much easier to match up scope delimiters such as parenthesis

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
	:straight t
	:hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Solaire

#+begin_src emacs-lisp
  (use-package solaire-mode
	:straight t
	:config
	(solaire-global-mode +1))
#+end_src

** Treemacs

[[https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs][Treemacs]] provides a file and project explorer.  It gives a nice outline similar to many IDEs.
   
#+begin_src emacs-lisp
  (use-package treemacs
	:straight t
	:ensure t
	:defer t
	:init(with-eval-after-load 'winum
		   (define-key winum-keymap (kbd "M-0") #'treemacs-select-window)))

  (use-package treemacs-evil
	:straight t
	:after evil treemacs)

  (use-package treemacs-magit
	:straight t
	:after magit treemacs)

  (use-package treemacs-projectile
	:straight t
	:after projectile treemacs)

#+end_src

** Undo-Tree

[[https://www.dr-qubit.org/undo-tree.html][Undo-Tree]] provides a powerful visualization of the undo tree structure

#+begin_src emacs-lisp

  (use-package undo-tree
	:straight t
	:config
	(global-undo-tree-mode 1))

#+end_src

* Help and navigation

** Vertico

#+begin_src emacs-lisp
	(use-package vertico
	  :straight t
	  :bind (:map vertico-map
				  ("C-j" . vertico-next)
				  ("C-k" . vertico-previous)
				  ("C-f" . vertico-exit)
				  :map minibuffer-local-map
				  ("M-h" . backward-kill-word))
	  :custom
	  (vertico-cycle t)
	  :init
	  (vertico-mode))

	(use-package savehist
	  :straight t
	  :init
	  (savehist-mode))

	(use-package marginalia
	  :straight t
	  :after vertico
	  :ensure t
	  :custom
	  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
	  :init
	  (marginalia-mode))

  (use-package ctrlf
	:straight t
	:config
	(ctrlf-mode +1))

  (use-package orderless
	:straight t)

  (setq completion-styles '(orderless)
		completion-category-defaults nil
		completion-category-overrides '((file (styles . (partial-completion)))))



#+end_src

** Prescient
   [[https://github.com/raxod502/prescient.el][Prescient]] is a sorting and filtering extension which improves the usability of suggestions by from vertico, Company

#+begin_src emacs-lisp

  (use-package prescient
	:straight t)
  (use-package company-prescient
	:straight t
	:after company prescient)

#+end_src

** Helpful

   [[eww:https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in emacs help functionality that provides considerably more contextual information.
    
   #+begin_src emacs-lisp

	 (use-package helpful
	   :straight t
	   :bind
	   ([remap describe-command] . helpful-command)
	   ([remap describe-key] . helpful-key))

   #+end_src

** Which-key

   [[https://github.com/justbur/emacs-which-key][Which-key]] provides helpful command completion for partial command prefixes.  It's configured with an idle delay, so that it doesn't pop up when commands are entered quickly, but shows the help after a short delay.

   #+begin_src emacs-lisp

	 (use-package which-key
	   :straight t
	   :init (which-key-mode)
	   :diminish(which-key-mode)
	   :config
	   (setq which-key-idle-delay 0.3))

   #+end_src
   
* Key Bindings

  Packages and configuration related to key bindings

** General

   General provides a convenient key binding method for key bindings.  Set up custom leader key with space bar.

   #+begin_src emacs-lisp

	 (setq mac-command-modifier 'meta)

	 (use-package general
	   :straight t
	   :config (general-create-definer void/leader-keys
	   :keymaps '(normal insert visual emacs) :prefix "SPC" :global-prefix
	   "C-SPC") (void/leader-keys "to" '(:ignore t :which-key "toggles")
	   "tt" '(counsel-load-theme :which-key "chose theme")))

	 (general-define-key "C-M-j" 'counsel-switch-buffer)

   #+end_src

** Hydra

   [[https://github.com/abo-abo/hydra][Hydra]] provides a utility for creating modal clusters of bindings which dismiss automatically after a specified timeout.  This is used to create a custom mode for quickly scaling text.

   #+begin_src emacs-lisp
		  (use-package hydra
			:straight t)

		  (defhydra hydra-text-scale (:timeout 4)
			"scale text"
			("j" text-scale-increase "in")
			("k" text-scale-decrease "out")
			("f" nil "finished" :exit t))

		  (void/leader-keys
			"ts" '(hydra-text-scale/body :which-key "scale-text" ))
   #+end_src

* Org Mode
  
** Org Mode Font Setup


#+begin_src emacs-lisp

  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
						  '(("^ *\\([-]\\) "
							 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
				  (org-level-2 . 1.1)
				  (org-level-3 . 1.05)
				  (org-level-4 . 1.0)
				  (org-level-5 . 1.1)
				  (org-level-6 . 1.1)
				  (org-level-7 . 1.1)
				  (org-level-8 . 1.1)))
	(set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

#+end_src
   
** Org Mode Config
   
Configure org-mode itself.  Replace ellipsis in collapsed sections with a nice arrow indicating additional content.

#+begin_src emacs-lisp
  (setq org-agenda-files
		'("~/.org/tasks.org"
		  "~/.org/birthdays.org"))
  (setq org-ellipsis " ▾")
  (setq org-log-done t)

#+end_src

** Org Babel Configuration

   Org mode babel integration for emacs-lisp and python
   
   #+begin_src emacs-lisp

	 (org-babel-do-load-languages
	  'org-babel-load-languages
	  '((emacs-lisp . t)
		(python . t)))

	 (setq org-confirm-babel-evaluate nil)

	 (push '("conf-unix" . conf-unix) org-src-lang-modes)
	 (require 'org-tempo )
	 (add-to-list 'org-structure-template-alist '("c99" . "src c"))
	 (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	 (add-to-list 'org-structure-template-alist '("py" . "src python"))
	 (add-to-list 'org-structure-template-alist '("sh" . "src shell"))

   #+end_src

** Org Bullets

   Nice bullets
   
#+begin_src emacs-lisp
  (use-package org-superstar
	:straight t
	:after org
	:hook( org-mode . org-superstar-mode )
	:custom
	(org-superstar-remove-leading-stars t)
	(org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Org Mode Visuals

   Configure org mode content to render in center of buffer

   #+begin_src emacs-lisp

	 (defun void/org-mode-visual-fill ()
	   (setq visual-fill-column-width 120
			 visual-fill-column-center-text t)
	   (visual-fill-column-mode 1)
	   (visual-line-mode 1))

	 (use-package visual-fill-column
	   :straight t
	   :after org
	   :defer t
	   :hook (org-mode . void/org-mode-visual-fill))

   #+end_src
   
** Org Roam

I'll probably have something to say here eventually

#+begin_src emacs-lisp
  (use-package org-roam
	:straight t
	:after org
	:init
	(setq org-roam-v2-ack t) ;; Never had a 1.0 database, don't worry about it
	:custom
	(org-roam-directory (file-truename "~/.roam/"))
	:bind (("C-c n l" . org-roam-buffer-toggle)
		   ("C-c n f" . org-roam-node-find)
		   ("C-c n g" . org-roam-graph)
		   ("C-c n i" . org-roam-node-insert)
		   ("C-c n c" . org-roam-capture)
		   ;; Dailies
		   ("C-c n j" . org-roam-dailies-capture-today)
		   :map org-mode-map
		   ("C-M-i" . completion-at-point))
	:config
	(org-roam-db-autosync-mode)
	;; If using org-roam-protocol
	(require 'org-roam-protocol))

#+end_src

* Development

** Tools

*** Company

[[http://company-mode.github.io/][Company]] is a completion framework for Emacs.  It includes backends for many common tasks.

#+begin_src emacs-lisp

  (use-package company
	:straight t)
  (add-hook 'after-init-hook 'global-company-mode)

#+end_src

*** Flycheck

[[https://www.flycheck.org/en/latest/index.html][Flycheck]] provides on the fly syntax checking.

#+begin_src emacs-lisp

  (use-package flycheck
	:straight t
	:init (global-flycheck-mode))

#+end_src

*** Forge

[[https://github.com/magit/forge][Forge]] provides integration to advanced git hosting features from providers such as GitHub and GitLab.
	
#+begin_src emacs-lisp

  (use-package forge
	:straight t)

#+end_src

*** Indent Guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
	:straight t
	:config
	(setq highlight-indent-guides-method 'character))
#+end_src

*** LSP

[[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] provides advanced language server based features to Emacs.

#+begin_src emacs-lisp

  (defun void/lsp-mode-setup ()
	(setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	(lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
	:straight t
	:init
	;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	(setq lsp-keymap-prefix "C-c l")
	:commands(lsp lsp-deferred)
	:config
	(setq read-process-output-max (* 5 1024 1024))
	(lsp-enable-which-key-integration))

  (use-package lsp-ui
	:straight t
	:hook (lsp-mode . lsp-ui-mode)
	:custom
	(lsp-ui-doc-position 'atpoint))

#+end_src

*** Magit

[[https://magit.vc/][Magit]] is an incredible, text based git client.  It has a beautiful, text based graph, and all of the power of the command line interface (+ some really nice convenience features).

#+begin_src emacs-lisp

	(use-package magit
		:straight t)

#+end_src

*** Projectile
	
    [[https://projectile.mx][Projectile]] is a project interaction library for Emacs that adds capabilities for quickly navigating around the files within a project.
	
#+begin_src emacs-lisp

  (use-package projectile
	:straight t
	:diminish projectile-mode
	:config (projectile-mode)
	:bind-keymap
	("C-c p" . projectile-command-map)
	:init
	(setq projectile-enable-cmake-presets t)
	(setq projectile-switch-project-action #'projectile-dired))

#+end_src

*** RipGrep

[[https://github.com/nlamirault/ripgrep.el][Ripgrep]] provides blazing fast search capabilities. Integrated with Projectile via projectile-ripgrep

#+begin_src emacs-lisp

  (use-package ripgrep
	:straight t)

  (use-package projectile-ripgrep
	:straight t
	:after projectile ripgrep)

#+end_src

*** Yasnippet

[[https://github.com/joaotavora/yasnippet][Yasnippet]] expands templates

#+begin_src emacs-lisp

  (use-package yasnippet
	:straight t)

#+end_src

*** Whitespace

Cleanup
#+begin_src emacs-lisp

  (require 'whitespace)

  (setq whitespace-style
		'(face trailing indentation::tab space-before-tab::tab space-after-tab))

  (use-package ws-butler
	:straight t
	:config
	(ws-butler-global-mode))

  (add-hook 'prog-mode-hook ; turn on whitespace-mode in any 'programming mode'
			(lambda ()
			  (whitespace-mode t)))

#+end_src

** Language Support

*** C/C++

CCLS is a C/C++ indexer which uses the compilation commands and clang frontend to ensure that the indexing is accurate.
	
#+begin_src emacs-lisp
  (use-package flycheck-clang-tidy
	:straight t
	:after flycheck
	:hook
	(flycheck-mode . flycheck-clang-tidy-setup))

  (use-package ccls
		  :straight t
		  :after lsp
		  :hook ((c-mode c++-mode objc-mode cuda-mode) .
				 (lambda ()
				   (require 'ccls)
				   (lsp)))
		  :init
		  (setq ccls-initialization-options '(:cache (:directory "build/.ccls-cache")
											  :clang ( :excludeArgs ["-working-directory"] ))))
  (use-package clang-format+
	:straight t
	:hook ((c-mode c++-mode) .
		   (lambda ()
			 (clang-format+-mode) )))
#+end_src
*** C#

#+begin_src emacs-lisp

  (use-package omnisharp
	:straight t
	:hook
	(csharp-mode . (lambda ()
					 (omnisharp-mode)
					 (add-to-list 'company-backends 'company-omnisharp))))
  ;; add support for xaml and cshtml
  (add-to-list 'auto-mode-alist '("\\.xaml\\'" . xml-mode))
  (add-to-list 'auto-mode-alist '("\\.cshtml\\'" . html-mode))
  (add-to-list 'auto-mode-alist '("\\.razor\\'" . html-mode))

#+end_src
*** CMake

	Add support for [[https://cmake.org][CMake]] files.

	#+begin_src emacs-lisp

	  (use-package cmake-mode
		:straight t)

	#+end_src

*** Dart

Add support for [[https://dart.dev][Dart]] and [[https://flutter.dev][Flutter]] development.

	#+begin_src emacs-lisp

	  (use-package dart-mode
		:straight t)
	  (use-package lsp-dart
		:straight t)
	  (add-hook 'dart-mode-hook 'lsp)

	#+end_src

*** Jenkins

Add support for Jenkinsfiles

#+begin_src emacs-lisp

  (use-package jenkinsfile-mode
	:straight t)

#+end_src

*** Make
	#+begin_src emacs-lisp

	  (use-package make-mode
		:straight t)

	#+end_src

*** Markdown

[[https://jblevins.org/projects/markdown-mode/][Markdown-mode]] is a major mode for editing markdown files.

#+begin_src emacs-lisp

  (use-package markdown-mode
	:straight t
	:commands
	(markdown-mode gfm-mode)
	:mode (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
	:init (setq markdown-command "pandoc"))

#+end_src

*** Meson

#+begin_src emacs-lisp
  (use-package meson-mode
	:straight t)
#+end_src
*** PlantUML

[[https://plantuml.com][PlantUML]] is an excellent uml and diagram markup language.  It allows you to create pretty diagrams with very little effort. [[https://github.com/skuro/plantuml-mode][Plantuml-mode]] adds a major mode for editing PlantUML diagrams.

#+begin_src emacs-lisp

	  (use-package plantuml-mode
		:straight t
		:config
		(setq plantuml-default-exec-mode 'server))

#+end_src

*** Python

#+begin_src emacs-lisp

  (use-package lsp-pyright
	:straight t
	:after lsp-mode
	:custom
	(lsp-pyright-auto-import-completions nil)
	(lsp-pyright-typechecking-mode "off"))

#+end_src

*** Swift

[[https:swift.org][Swift]] language support is added with the [[https://github.com/swift-emacs/swift-mode][swift-mode]] package.  Language server features are added with [[https://github.com/emacs-lsp/lsp-sourcekit][lsp-sourcekit]]. Finally, syntax checking is provided by

**** TODO flycheck-integration

#+begin_src emacs-lisp

  (use-package lsp-sourcekit
	:straight t
	:after lsp-mode
	:config
	(setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp"))


  (use-package swift-mode
	:straight t
	:hook (swift-mode . (lambda () (lsp))))

#+end_src

*** Yaml

	#+begin_src emacs-lisp

	  (use-package yaml-mode
		:straight t)

	#+end_src
	
* Terminals and Shells

** All Terminals

Configuration for terminals which all use

#+begin_src emacs-lisp

  (setq explicit-shell-file-name "zsh")
  (setq term-prompt-regexp "^#$%>\n]*[#$%>] *")

#+end_src

** VTerm

   #+begin_src emacs-lisp

	 (use-package vterm
	   :straight t
	   :commands vterm
	   :config
	   (setq vterm-max-scrollback 10000))

   #+end_src

** EShell

Emacs is frequently started from the UI instead of terminal.  Make sure the path still works.

#+begin_src emacs-lisp

  (defun void/configure-eshell ()
	;; Save a command history
	(add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

	;; Truncate buffer for performance
	(add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
	;; Bind C-r to pull up history buffer
	(evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)

	;; Renormalize keymaps
	(evil-normalize-keymaps)

	(setq eshell-history-size 10000
		  eshell-buffer-maximum-lines 10000
		  eshell-hist-ignoredups t
		  eshell-scroll-to-bottom-on-input t))

  (use-package exec-path-from-shell
	:straight t)

  (when (memq window-system '(mac ns x))
	(exec-path-from-shell-initialize))
  (use-package eshell-git-prompt
	:straight t)

  (use-package eshell
	:straight t
	:hook (eshell-first-time-mode . void/configure-eshell)
	:config
	(eshell-git-prompt-use-theme 'powerline))

#+end_src

** Color Support

   #+begin_src emacs-lisp

	 (use-package eterm-256color
	   :straight t
	   :hook (term-mdode . eterm-256color-mode))

   #+end_src

* Email

#+begin_src emacs-lisp :tangle no
  (use-package mu4e
  :config
  (require 'org-mu4e)
  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/mail")

  ;; Set up vertico for completions
  (setq mu4e-completing-read-function #'vertico--advice)
  ;; Force Mu4e to change filenames when moving messages to different folders
  (setq mu4e-change-filenames-when-moving t)
  (setq mu4e-contexts
		'(,(make-mu4e-context
			:name "Voidstar"
			:match-func (lambda (msg)
						  (when msg
							(string-prefix-p "/voidstar"
											 (mu4e-message-field msg :maildir))))
			:vars '(
					(user-full-name . "Zach Heylmun")
					(user-mail-address . "zach@voidstarsolutions.com")
					(mu4e-sent-folder . "/voidstar/Sent Items")
					(mu4e-trash-folder . "/voidstar/Trash")
					(mu4e-drafts-folder . "/voidstar/Drafts")
					(mu4e-refile-folder . "/voidstar/Archive")
					(mu4e-sent-messages-behavior . sent)
					))
		  ,(make-mu4e-context
			:name "Personal"
			:match-func (lambda (msg) (when msg
										(string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
			:vars '
					(mu4e-sent-folder . "/Personal/Sent")
					(mu4e-trash-folder . "/Personal/Deleted")
					(mu4e-refile-folder . "/Personal/Archive")
					))
		  ))
  (setq mu4e-context-policy 'pick-first)
  )
#+end_src
