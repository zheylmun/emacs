#+TITLE:	Zach Heylmun Emacs Config
#+AUTHOR:	Zach Heylmun
#+EMAIL:	zach@voidstarsolutions.com

* Emacs Config
  
  [[https://emacs.org][Emacs]] is a neat text editor

* Auto-Package-Update

  Automagically update packages weekly if updates are available.

  #+begin_src emacs-lisp

	;; Automatically pull updates weekly and hide results
	(use-package auto-package-update
	  :custom
	  (auto-package-update-interval 7)
	  (auto-package-update-hide-results t)
	  :config
	  (auto-package-update-maybe))

  #+end_src

* UI Configuration

  The following section configures the basics of the stock Emacs UI. Inint.el also disables several UI elements, the startup message.  Here we configure default buffer rendering and UI behavior.

** Basic UI elements

   #+begin_src emacs-lisp

	 ;; Start text 16 pixels from the left edge of the buffer
	 (set-fringe-mode 16)

	 ;; Show column numbers in the mini-buffer
	 (column-number-mode)

	 ;; Enable line numbers globally
	 (global-display-line-numbers-mode t)

	 ;; Disable line numbers in org-mode, term-mode and eshell-mode
	 (dolist (mode '(org-mode-hook
					 term-mode-hook
					 eshell-mode-hook))
	   (add-hook mode (lambda () (display-line-numbers-mode 0))))

	 ;; 8 character tabs are too damn large
	 (setq-default tab-width 4)
	 ;; Default behavior is case sensitive for sorting.
	 ;; Just sort alphabetically
	 (setq sort-fold-case t)

   #+end_src

** File backup behavior

   Default file backup behavior is awful.  Make it less awful:

   #+begin_src emacs-lisp

	 (setq user-emacs-directory "~/.cache/emacs")

	 (use-package no-littering)

	 ;; no-littering doesn't set this by default so we must place
	 ;; auto save files in the same path as it uses for sessions
	 (setq auto-save-file-name-transforms
		   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

   #+end_src
   
* Fonts

  #+begin_src emacs-lisp

	;; Fira Code Retina is a beautiful, mono-spaced font with nice ligatures for programming symbols
	;; Used as default font for most things
	(set-face-attribute 'default nil :font "Fira Code Retina" :height 140)

	(use-package all-the-icons)

	;; All the icons requires that the fonts be installed to the system before use.
	;; Check for them and install if unavailable, silencing the confirmation
	(if(not(find-font(font-spec :name "all-the-icons")))
		(all-the-icons-install-fonts 0))

  #+end_src
   
* UI Packages

  Set of packages to improve the look and functionality of the UI
  
** Doom Modeline
    
   The Doom modeline provides a concise view of current mode functionality

   #+begin_src emacs-lisp

	 (use-package doom-modeline
	   :ensure t
	   :init (doom-modeline-mode 1)
	   :custom ((doom-modeline-height 32)))

   #+end_src

** Doom Themes
    
   #+begin_src emacs-lisp

	 (use-package doom-themes
	   :config
	   (doom-themes-visual-bell-config)
	   (doom-themes-treemacs-config)
	   (doom-themes-org-config)
	   :init
	   (load-theme 'doom-monokai-classic t))

   #+end_src

** Multiple Cursors

Add friendly mulit-editing

#+begin_src emacs-lisp

  (use-package multiple-cursors
	:config
	(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines))

#+end_src

** Rainbow Delimiters

   [[eww:https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]] makes it much easier to match up scope delimiters such as parenthesis

   #+begin_src emacs-lisp

	 (use-package rainbow-delimiters
	   :hook (prog-mode . rainbow-delimiters-mode))

   #+end_src

** Treemacs
   [[https://github.com/Alexander-Miller/treemacs#treemacs---a-tree-layout-file-explorer-for-emacs][Treemacs]] provides a file and project explorer.  It gives a nice outline similar to many IDEs.
   #+begin_src emacs-lisp
	 (use-package treemacs
	   :ensure t
	   :defer t
	   :init(with-eval-after-load 'winum
			  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window)))

	 (use-package treemacs-evil
	   :after evil treemacs)
	 (use-package treemacs-magit
	   :after magit treemacs)
	 (use-package treemacs-projectile
	   :after projectile treemacs)

   #+end_src
   
* Help and navigation
   
** Ivy, Swiper, Counsel

   [[eww:https://github.com/abo-abo/swiper][Ivy, Swiper, and Counsel]] provide a generic completion mechanism for emacs.  Replace the default search and minibuffer capabilities with the enhanced features from Ivy. Add more comprehensive information with [[eww:https://github.com/Yevgnen/ivy-rich][Ivy-Rich]].

   #+begin_src emacs-lisp

	 (use-package ivy
	   :diminish
	   :bind (("C-s" . swiper)
			  :map ivy-minibuffer-map
			  ("TAB" . ivy-alt-done)
			  ("C-l" . ivy-alt-done)
			  ("C-j" . ivy-next-line)
			  ("C-k" . ivy-previous-line)
			  ("C-M-J" . ivy-immediate-done)
			  :map ivy-switch-buffer-map
			  ("C-k" . ivy-previous-line)
			  ("C-l" . ivy-done)
			  ("C-d" . ivy-switch-buffer-kill)
			  :map ivy-reverse-i-search-map
			  ("C-k" . ivy-previous-line)
			  ("C-d" . ivy-reverse-i-search-kill))
	   :config
	   (ivy-mode 1))

	 (use-package counsel
	   :bind(( "M-x" . counsel-M-x)
			 ("C-x b" . counsel-ibuffer)
			 ("C-x C-f" . counsel-find-file)
			 :map minibuffer-local-map
			 ("C-r" . 'counsel-minibuffer-history)))

	 (use-package ivy-rich
	   :after ivy
	   :init
	   (ivy-rich-mode 1))

   #+end_src

** Prescient
   [[https://github.com/raxod502/prescient.el][Prescient]] is a sorting and filtering extension which improves the usability of suggestions by from Ivy, Company

   #+begin_src emacs-lisp

	 (use-package prescient)
	 (use-package ivy-prescient
	   :after ivy prescient)
	 (use-package company-prescient
	   :after company prescient)

   #+end_src

** Helpful

   [[eww:https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in emacs help functionality that provides considerably more contextual information.
    
   #+begin_src emacs-lisp

	 (use-package helpful
	   :custom
	   (counsel-describe-function-function #'helpful-callable)
	   (counsel-describe-variable-function #'helpful-variable)
	   :bind
	   ([remap describe-function] . counsel-describe-function)
	   ([remap describe-command] . helpful-command)
	   ([remap describe-variable] . counsel-describe-variable)
	   ([remap describe-key] . helpful-key))

   #+end_src

** Which-key

   [[https://github.com/justbur/emacs-which-key][Which-key]] provides helpful command completion for partial command prefixes.  It's configured with an idle delay, so that it doesn't pop up when commands are entered quickly, but shows the help after a short delay.

   #+begin_src emacs-lisp

	 (use-package which-key
	   :init (which-key-mode)
	   :diminish(which-key-mode)
	   :config
	   (setq which-key-idle-delay 0.3))

   #+end_src

* Key Bindings

  Packages and configuration related to key bindings

** General

   General provides a convenient key binding method for key bindings.  Set up custom leader key with space bar.

   #+begin_src emacs-lisp

	 (setq mac-command-modifier 'meta)

	 (use-package general :config (general-create-definer void/leader-keys
	   :keymaps '(normal insert visual emacs) :prefix "SPC" :global-prefix
	   "C-SPC") (void/leader-keys "to" '(:ignore t :which-key "toggles")
	   "tt" '(counsel-load-theme :which-key "chose theme")))

	 (general-define-key "C-M-j" 'counsel-switch-buffer)

   #+end_src

** EVIL

   [[eww:https://github.com/emacs-evil/evil][Evil]] mode brings Vim keybindings to Emacs.
   
   #+begin_src emacs-lisp
	 (defun void/evil-hook ()
	   (dolist (mode '(custom-mode
					   eshell-mode
					   git-rebase-mode
					   erc-mode
					   circe-server-mode
					   circe-chat-mode
					   circe-query-mode
					   sauron-mode
					   term-mode))
		 (add-to-list 'evil-emacs-state-modes mode)))

	 (use-package evil
	   :init
	   (setq evil-want-integration t)
	   (setq evil-want-keybinding nil)
	   (setq evil-want-C-u-scroll t)
	   (setq evil-want-C-i-jump nil)
	   :hook (evil-mode . void/evil-hook)
	   :config
	   (evil-mode 1)

	   ;; Since I have the fancy keyboard I'm not gonna remap to add backspace, as it's under my thumb
	   (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	   (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	   ;; Use visual line motions everywhere
	   (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	   (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
	   (evil-set-initial-state 'messages-buffer-mode 'normal) 
	   (evil-set-initial-state 'dashboard-mode 'normal))

   #+end_src

** Evil Collection

   [[https://github.com/emacs-evil/evil-collection][Evil Collection]] Provides a sensible set of file types and automatically configures Evil mode for them

   #+begin_src emacs-lisp

	 (use-package evil-collection)

   #+end_src

** Hydra

   [[https://github.com/abo-abo/hydra][Hydra]] provides a utility for creating modal clusters of bindings which dismiss automatically after a specified timeout.  This is used to create a custom mode for quickly scaling text.

   #+begin_src emacs-lisp
	 (use-package hydra)

	 (defhydra hydra-text-scale (:timeout 4)
	   "scale text"
	   ("j" text-scale-increase "in")
	   ("k" text-scale-decrease "out")
	   ("f" nil "finished" :exit t))

	 (void/leader-keys
	   "ts" '(hydra-text-scale/body :which-key "scale-text" ))
   #+end_src


   #+begin_src emacs-lisp

   #+end_src

* Org Mode
  
** Org Babel Configuration

   Org mode babel integration for emacs-lisp and python
   
   #+begin_src emacs-lisp

	 (org-babel-do-load-languages
	  'org-babel-load-languages
	  '((emacs-lisp . t)
		(python . t)))

	 (setq org-confirm-babel-evaluate nil)

	 (push '("conf-unix" . conf-unix) org-src-lang-modes)

	 (require 'org-tempo )

	 (add-to-list 'org-structure-template-alist '("sh" . "src shell"))

	 (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

	 (add-to-list 'org-structure-template-alist '("py" . "src python"))

   #+end_src

** Org Bullets

   Nice bullets
   
   #+begin_src emacs-lisp

	 (use-package org-bullets
	   :after org
	   :hook( org-mode . org-bullets-mode )
	   :custom
	   (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

   #+end_src
   
** Org Mode Font Setup

   Configure some nice defaults for viewing org mode files.
   
   #+begin_src emacs-lisp

	 (defun void/org-font-setup ()
	   ;; Replace list hyphen with dot
	   (font-lock-add-keywords 'org-mode
							   '(("^ *\\([-]\\) "
								  (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

	   ;; Set faces for heading levels
	   (dolist (face '((org-level-1 . 1.2)
					   (org-level-2 . 1.1)
					   (org-level-3 . 1.05)
					   (org-level-4 . 1.0)
					   (org-level-5 . 1.1)
					   (org-level-6 . 1.1)
					   (org-level-7 . 1.1)
					   (org-level-8 . 1.1)))
		 (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

	   ;; Ensure that anything that should be fixed-pitch in Org files appears that way
	   (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
	   (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
	   (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
	   (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
	   (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
	   (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
	   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
	   (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
	   (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
	   (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
	   (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

   #+end_src
   
** Org Mode Visuals

   Configure org mode content to render in center of buffer

   #+begin_src emacs-lisp

	 (defun void/org-mode-visual-fill ()
	   (setq visual-fill-column-width 80
			 visual-fill-column-center-text t)
	   (visual-fill-column-mode 1)
	   (visual-line-mode 1))

	 (use-package visual-fill-column
	   :defer t
	   :hook (org-mode . void/org-mode-visual-fill))

   #+end_src
   
** Org Mode Config
   
   Configure org-mode itself.  Replace ellipsis in collapsed sections with a nice arrow indicating additional content.

   #+begin_src emacs-lisp

	 (use-package org
	   ;;:hook (org-mode . efs/org-mode-setup)
	   :config
	   (setq org-agenda-files
			 '("~/.org/tasks.org"
			   "~/.org/birthdays.org"))
	   (setq org-ellipsis " ▾")
	   (setq org-todo-keywords
			 '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" )
			   (sequence  "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(r)" "WAIT(w)" "HOLD(h)" "|" "COMPLETED(c)" "CANCELED(k)" )))
	   (setq org-log-done t)
	   (void/org-font-setup))

   #+end_src

** Org Roam

I'll probably have something to say here eventually

#+begin_src emacs-lisp
  (use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t) ;; Never had a 1.0 database, don't worry about it
  :custom
  (org-roam-directory (file-truename "~/.roam/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
		 ("C-c n f" . org-roam-node-find)
		 ("C-c n g" . org-roam-graph)
		 ("C-c n i" . org-roam-node-insert)
		 ("C-c n c" . org-roam-capture)
		 ;; Dailies
		 ("C-c n j" . org-roam-dailies-capture-today)
		 :map org-mode-map
		 ("C-M-i" . completion-at-point))
  :config
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))

#+end_src
* Development
** Tools
*** Company
	[[http://company-mode.github.io/][Company]] is a completion framework for Emacs.  It includes backends for many common tasks.
	#+begin_src emacs-lisp

	  (use-package company)
	  (add-hook 'after-init-hook 'global-company-mode)

	#+end_src

*** E Shell
    Emacs is frequently started from the UI instead of terminal.  Make sure the path still works.
	#+begin_src emacs-lisp

	  (use-package exec-path-from-shell)

	  (when (memq window-system '(mac ns x))
		(exec-path-from-shell-initialize))

	#+end_src
*** Flycheck
	[[https://www.flycheck.org/en/latest/index.html][Flycheck]] provides on the fly syntax checking.
	#+begin_src emacs-lisp
	  (use-package flycheck
		:ensure t
		:init (global-flycheck-mode))
	#+end_src
*** Forge
    [[https://github.com/magit/forge][Forge]] provides integration to advanced git hosting features from providers such as GitHub and GitLab.
	#+begin_src emacs-lisp

	  (use-package forge)

	#+end_src
*** LSP
    [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] provides advanced language server based features to Emacs.
	#+begin_src emacs-lisp

	  (defun void/lsp-mode-setup ()
		(setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
		(lsp-headerline-breadcrumb-mode))

	  (use-package lsp-mode
		:init
		;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
		(setq lsp-keymap-prefix "C-c l")
		:commands(lsp lsp-deferred)
		:config
		(lsp-enable-which-key-integration))

	  (use-package lsp-ui
		:hook (lsp-mode . lsp-ui-mode)
		:custom
		(lsp-ui-doc-position 'bottom))

	  (use-package ivy-xref
		:ensure t
		:init
		(setq xref-show-definitions-function #'ivy-xref-show-defs))

	#+end_src
*** Magit
    [[https://magit.vc/][Magit]] is an incredible, text based git client.  It has a beautiful, text based graph, and all of the power of the command line interface (+ some really nice convenience features).
	#+begin_src emacs-lisp

	  (use-package magit)

	#+end_src
*** Projectile
	
    [[https://projectile.mx][Projectile]] is a project interaction library for Emacs that adds capabilities for quickly navigating around the files within a project.
	#+begin_src emacs-lisp

	  (use-package projectile
		:diminish projectile-mode
		:config (projectile-mode)
		:custom ((projectile-completion-system 'ivy))
		:bind-keymap
		("C-c p" . projectile-command-map)
		:init
		;; NOTE: Set this to the folder where you keep your Git repos!

		(when (file-directory-p "~/dev/")
		  (setq projectile-project-search-path '("~/dev")))
		(setq projectile-switch-project-action #'projectile-dired))

	  (use-package counsel-projectile
		:config (counsel-projectile-mode))

	#+end_src
*** RipGrep
[[https://github.com/nlamirault/ripgrep.el][Ripgrep]] provides blazing fast search capabilities. Integrated with Projectile via projectile-ripgrep
#+begin_src emacs-lisp

  (use-package ripgrep)
  (use-package projectile-ripgrep
	:after projectile ripgrep)
#+end_src
*** Whitespace Mode
	#+begin_src emacs-lisp
	  (require 'whitespace)

	  (setq whitespace-style '(face trailing indentation::tab space-before-tab::tab space-after-tab))
											  ; turn on whitespace-mode in any 'programming mode'
	  (add-hook 'prog-mode-hook (lambda () (whitespace-mode t)))

	#+end_src
** Language Support
*** C/C++

    CCLS is a C/C++ indexer which uses the compilation commands and clang frontend to ensure that the indexing is accurate.
	
	#+begin_src emacs-lisp

	  (use-package ccls
		:hook ((c-mode c++-mode objc-mode cuda-mode) .
			   (lambda () (require 'ccls) (lsp))))

	#+end_src

*** CMake

	Add support for [[https://cmake.org][CMake]] files.

	#+begin_src emacs-lisp

	  (use-package cmake-mode)

	#+end_src

*** Dart

	Add support for [[https://dart.dev][Dart]] and [[https://flutter.dev][Flutter]] development.

	#+begin_src emacs-lisp

	  (use-package dart-mode)
	  (use-package lsp-dart)
	  (add-hook 'dart-mode-hook 'lsp)

	#+end_src

*** Jenkins

Add support for Jenkinsfiles

#+begin_src emacs-lisp

  (use-package jenkinsfile-mode)

#+end_src

*** Make
	#+begin_src emacs-lisp

	  (use-package make-mode)

	#+end_src

*** Python

#+begin_src emacs-lisp
(use-package lsp-python-ms
  :ensure t
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
#+end_src 

*** Swift

[[https:swift.org][Swift]] language support is added with the [[https://github.com/swift-emacs/swift-mode][swift-mode]] package.  Language server features are added with [[https://github.com/emacs-lsp/lsp-sourcekit][lsp-sourcekit]]. Finally, syntax checking is provided by
**** TODO flycheck-integration
#+begin_src emacs-lisp

  (use-package lsp-sourcekit
  :after lsp-mode
  :config
  (setq lsp-sourcekit-executable "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp"))

  
  (use-package swift-mode
	:hook (swift-mode . (lambda () (lsp))))

#+end_src
*** Yaml
	#+begin_src emacs-lisp

	  (use-package yaml-mode)

	#+end_src
	
* Terminals and Shells

** All Terminals

   Configuration for terminals which all use

   #+begin_src emacs-lisp

	 (setq explicit-shell-file-name "zsh")
	 (setq term-prompt-regexp "^#$%>\n]*[#$%>] *")

   #+end_src

** VTerm

   #+begin_src emacs-lisp

	 (use-package vterm
	   :commands vterm
	   :config
	   (setq vterm-max-scrollback 10000))

   #+end_src

** EShell
   EShell is Emacs built in shell.

   #+begin_src emacs-lisp
	 (defun void/configure-eshell ()
	   ;; Save a command history
	   (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

	   ;; Truncate buffer for performance
	   (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
	   ;; Bind C-r to pull up history buffer
	   (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)

	   ;; Renormalize keymaps
	   (evil-normalize-keymaps)

	   (setq eshell-history-size 10000
			 eshell-buffer-maximum-lines 10000
			 eshell-hist-ignoredups t
			 eshell-scroll-to-bottom-on-input t))

	 (use-package eshell-git-prompt)

	 (use-package eshell
	   :hook (eshell-first-time-mode . void/configure-eshell)
	   :config
	   (eshell-git-prompt-use-theme 'powerline))
   #+end_src

** Color Support

   #+begin_src emacs-lisp

	 (use-package eterm-256color
	   :hook (term-mdode . eterm-256color-mode))

   #+end_src

