#+TITLE: Zach Heylmun Emacs Config
#+AUTHOR: Zach Heylmun
#+EMAIL: zach@voidstarsolutions.com
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Emacs Config
[[https://emacs.org][Emacs]] is a neat text editor

* Automatic install and configuration
In order to bootstrap this configuration, simply run the following command, then restart Emacs.
#+begin_src
  ;;Tangle this file
  M-x org-babel-tangle
#+end_src


* Stock UI Configuration

The following section configures the basics of the stock Emacs UI. It disables several UI elements, the startup message, and configures line numbers for common modes.
** Basic UI elements

#+begin_src emacs-lisp
  ;; No need for the startup screen
  (setq inhibit-startup-message t)
  ;; No need for scroll bars
  (scroll-bar-mode -1)
  ;; No need for Toolbars
  (tool-bar-mode -1)
  ;; Start text 30 pixels from the left edge of the buffer 
  (set-fringe-mode 30)
  ;; Show column numbers in the mini-buffer
  (column-number-mode)
  ;; Enable line numbers globally
  (global-display-line-numbers-mode t)
  ;; Disable line numbers in org-mode, term-mode and eshell-mode
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src
** Fonts
#+begin_src emacs-lisp
  ;; Fira Code Retina is a gorgeous, mono-spaced font with nice ligatures for programming symbols
  ;; Used as default font for most things
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 140)

#+end_src

* Third Party Packages

** Package setup with use-package

[[https://github.com/jwiegley/use-package][Use-Package]] is an excellent package which greatly simplifies the installation and configuration of packages for emacs. The following configuration bootstraps the built in package system to ensure that used packages are installed before use.

#+begin_src emacs-lisp
  ; Load package management functionality
  (require 'package)

  ; Set some repositories
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)

#+end_src

** Ivy

[[eww:https://github.com/abo-abo/swiper][Ivy]] is a generic completion mechanism for emacs.  Replace the default search and minibuffer capabilities with the enhanced features from Ivy.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

#+end_src
* TEMP BLOCK While we integrate everything nicely
Once we're done this whole block will go away
#+begin_src emacs-lisp

	  (use-package command-log-mode)

	  (use-package doom-themes
	    :init (load-theme 'doom-monokai-classic t))

	  (use-package doom-modeline
	    :ensure t
	    :init (doom-modeline-mode 1)
	    :custom ((doom-modeline-height 16)))

	  (use-package doom-themes)

	  (use-package rainbow-delimiters
	    :hook (prog-mode . rainbow-delimiters-mode))

	  (use-package which-key
	    :init (which-key-mode)
	    :diminish(which-key-mode)
	    :config
	    (setq which-key-idle-delay 0.3))

	  (use-package all-the-icons)
	  ;; All the icons requires that the fonts be installed to the system before use.
	  ;; Check for them and install if unavailable
	  (if(not(find-font(font-spec :name "all-the-icons"))) (all-the-icons-install-fonts 0))

 
	  (use-package counsel
	    :bind(( "M-x" . counsel-M-x)
		  ("C-x b" . counsel-ibuffer)
		  ("C-x C-f" . counsel-find-file)
		  :map minibuffer-local-map
		  ("C-r" . 'counsel-minibuffer-history)))

	  (use-package helpful
	    :custom
	    (counsel-describe-function-function #'helpful-callable)
	    (counsel-describe-variable-function #'helpful-variable)
	    :bind
	    ([remap describe-function] . counsel-describe-function)
	    ([remap describe-command] . helpful-command)
	    ([remap describe-variable] . counsel-describe-variable)
	    ([remap describe-key] . helpful-key))

     (use-package ivy-rich
	:after ivy
	:init
	(ivy-rich-mode 1))

      (use-package general
	    :config
	    (general-create-definer void/leader-keys
	      :keymaps '(normal insert visual emacs)
	      :prefix "SPC"
	      :global-prefix "C-SPC")
	    (void/leader-keys
	     "t" '(:ignore t :which-key "toggles")
	     "tt" '(counsel-load-theme :which-key "chose theme")))

	  (general-define-key
	   "C-M-j" 'counsel-switch-buffer)

	  (defun void/evil-hook ()
	    (dolist (mode '(custom-mode
			    eshell-mode
			    git-rebase-mode
			    erc-mode
			    circe-server-mode
			    circe-chat-mode
			    circe-query-mode
			    sauron-mode
			    term-mode))
	      (add-to-list 'evil-emacs-state-modes mode)))

	  (use-package evil
	    :init
	    (setq evil-want-integration t)
	    (setq evil-want-keybinding nil)
	    (setq evil-want-C-u-scroll t)
	    (setq evil-want-C-i-jump nil)
	    :hook (evil-mode . void/evil-hook)
	    :config
	    (evil-mode 1)

	    ;; Since I have the fancy keyboard I'm not gonna remap to add backspace, as it's under my thumb
	    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	    ;; Use visual line motions everywhere
	    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
	    (evil-set-initial-state 'messages-buffer-mode 'normal) 
	    (evil-set-initial-state 'dashboard-mode 'normal))

	  (use-package evil-collection)

	  (use-package hydra)

	  (defhydra hydra-text-scale (:timeout 4)
	    "scale text"
	    ("j" text-scale-increase "in")
	    ("k" text-scale-decrease "out")
	    ("f" nil "finished" :exit t))

	  (void/leader-keys
	    "ts" '(hydra-text-scale/body :which-key "scale-text" ))

	  (use-package org
	    ;;:hook (org-mode . efs/org-mode-setup)
	    :config
	    (setq org-ellipsis " ▾")
	    (setq org-agenda-files
		  '("~/.emacs.d/org-files/tasks.org")))

	  (use-package org-bullets
	    :after org
	    :hook( org-mode . org-bullets-mode )
	    :custom
	    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

	  (defun efs/org-font-setup ()
	    ;; Replace list hyphen with dot
	    (font-lock-add-keywords 'org-mode
				    '(("^ *\\([-]\\) "
				       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

	  ;; Set faces for heading levels
	    (dolist (face '((org-level-1 . 1.2)
			    (org-level-2 . 1.1)
			    (org-level-3 . 1.05)
			    (org-level-4 . 1.0)
			    (org-level-5 . 1.1)
			    (org-level-6 . 1.1)
			    (org-level-7 . 1.1)
			    (org-level-8 . 1.1)))
	      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

	    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
	    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
	    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
	    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
	    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
	    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
	    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
	    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
	    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
	    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
	    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
	    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

	  (defun void/org-mode-visual-fill ()
	    (setq visual-fill-column-width 200
		  visual-fill-column-center-text t)
	    (visual-fill-column-mode 1)
	    (visual-line-mode 1))

	  (use-package visual-fill-column
	    :defer t
	    :hook (org-mode . void/org-mode-visual-fill))

	  (org-babel-do-load-languages
	   'org-babel-load-languages
	   '((emacs-lisp . t)
	     (python . t)))

	  (setq org-confirm-babel-evaluate nil)

	  (require 'org-tempo )
	  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
	  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

* Org Mode

** Org Babel Configuration

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
  
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src
** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun void/org-babel-tangle-config () 
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/emacs_config.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'void/org-babel-tangle-config)))


#+end_src
